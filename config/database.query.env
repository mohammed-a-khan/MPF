# CS Test Automation Framework - Database Query Configuration
# This file contains predefined SQL queries for database testing
# Queries can be referenced by their keys in test scenarios

# ==================== USER QUERIES ====================
# User Selection Queries
GET_ALL_USERS=SELECT * FROM Users WHERE IsDeleted = 0
GET_USER_BY_ID=SELECT * FROM Users WHERE UserId = @userId AND IsDeleted = 0
GET_USER_BY_EMAIL=SELECT * FROM Users WHERE Email = @email AND IsDeleted = 0
GET_USER_BY_USERNAME=SELECT * FROM Users WHERE Username = @username AND IsDeleted = 0
GET_ACTIVE_USERS=SELECT * FROM Users WHERE IsActive = 1 AND IsDeleted = 0
GET_INACTIVE_USERS=SELECT * FROM Users WHERE IsActive = 0 AND IsDeleted = 0
GET_USERS_BY_ROLE=SELECT u.* FROM Users u INNER JOIN UserRoles ur ON u.UserId = ur.UserId WHERE ur.RoleId = @roleId AND u.IsDeleted = 0
GET_USERS_BY_DEPARTMENT=SELECT * FROM Users WHERE DepartmentId = @departmentId AND IsDeleted = 0
GET_USERS_CREATED_TODAY=SELECT * FROM Users WHERE CAST(CreatedDate AS DATE) = CAST(GETDATE() AS DATE)
GET_USERS_WITH_2FA=SELECT * FROM Users WHERE TwoFactorEnabled = 1 AND IsDeleted = 0

# User Modification Queries
INSERT_USER=INSERT INTO Users (Username, Email, FirstName, LastName, PasswordHash, IsActive, CreatedDate, CreatedBy) VALUES (@username, @email, @firstName, @lastName, @passwordHash, @isActive, GETDATE(), @createdBy)
UPDATE_USER=UPDATE Users SET FirstName = @firstName, LastName = @lastName, Email = @email, ModifiedDate = GETDATE(), ModifiedBy = @modifiedBy WHERE UserId = @userId
UPDATE_USER_PASSWORD=UPDATE Users SET PasswordHash = @passwordHash, PasswordLastChanged = GETDATE(), ModifiedDate = GETDATE(), ModifiedBy = @modifiedBy WHERE UserId = @userId
ACTIVATE_USER=UPDATE Users SET IsActive = 1, ActivatedDate = GETDATE(), ModifiedDate = GETDATE(), ModifiedBy = @modifiedBy WHERE UserId = @userId
DEACTIVATE_USER=UPDATE Users SET IsActive = 0, DeactivatedDate = GETDATE(), ModifiedDate = GETDATE(), ModifiedBy = @modifiedBy WHERE UserId = @userId
DELETE_USER_SOFT=UPDATE Users SET IsDeleted = 1, DeletedDate = GETDATE(), DeletedBy = @deletedBy WHERE UserId = @userId
DELETE_USER_HARD=DELETE FROM Users WHERE UserId = @userId

# User Validation Queries
CHECK_USER_EXISTS=SELECT COUNT(*) as UserCount FROM Users WHERE Email = @email OR Username = @username
CHECK_USERNAME_EXISTS=SELECT COUNT(*) as UsernameCount FROM Users WHERE Username = @username AND IsDeleted = 0
VALIDATE_USER_PASSWORD=SELECT UserId FROM Users WHERE Username = @username AND PasswordHash = @passwordHash AND IsActive = 1 AND IsDeleted = 0

# ==================== ROLE & PERMISSION QUERIES ====================
# Role Queries
GET_ROLE_BY_ID=SELECT * FROM Roles WHERE RoleId = @roleId
GET_ROLE_BY_NAME=SELECT * FROM Roles WHERE RoleName = @roleName
GET_USER_ROLES=SELECT r.* FROM Roles r INNER JOIN UserRoles ur ON r.RoleId = ur.RoleId WHERE ur.UserId = @userId AND r.IsActive = 1
ASSIGN_ROLE_TO_USER=INSERT INTO UserRoles (UserId, RoleId, AssignedDate, AssignedBy) VALUES (@userId, @roleId, GETDATE(), @assignedBy)
REMOVE_ROLE_FROM_USER=DELETE FROM UserRoles WHERE UserId = @userId AND RoleId = @roleId

# Permission Queries
GET_PERMISSION_BY_ID=SELECT * FROM Permissions WHERE PermissionId = @permissionId
GET_USER_PERMISSIONS=SELECT DISTINCT p.* FROM Permissions p INNER JOIN RolePermissions rp ON p.PermissionId = rp.PermissionId INNER JOIN UserRoles ur ON rp.RoleId = ur.RoleId WHERE ur.UserId = @userId
CHECK_USER_HAS_PERMISSION=SELECT COUNT(*) as HasPermission FROM Permissions p INNER JOIN RolePermissions rp ON p.PermissionId = rp.PermissionId INNER JOIN UserRoles ur ON rp.RoleId = ur.RoleId WHERE ur.UserId = @userId AND p.PermissionName = @permissionName

# ==================== ORDER QUERIES ====================
# Order Selection Queries
GET_ORDER_BY_ID=SELECT * FROM Orders WHERE OrderId = @orderId AND IsDeleted = 0
GET_ORDERS_BY_USER=SELECT * FROM Orders WHERE UserId = @userId AND IsDeleted = 0 ORDER BY OrderDate DESC

# Order Modification Queries

# Order Item Queries

# Order Statistics Queries

# ==================== PRODUCT QUERIES ====================
# Product Selection Queries
GET_PRODUCT_BY_ID=SELECT * FROM Products WHERE ProductId = @productId AND IsDeleted = 0

# Product Modification Queries

# Inventory Queries

# ==================== CUSTOMER QUERIES ====================
# Customer Selection Queries
GET_CUSTOMER_BY_ID=SELECT * FROM Customers WHERE CustomerId = @customerId AND IsDeleted = 0

# Customer Modification Queries

# Customer Analytics Queries

# ==================== TRANSACTION QUERIES ====================
# Payment Queries
GET_PAYMENT_BY_ID=SELECT * FROM Payments WHERE PaymentId = @paymentId

# Transaction Log Queries
GET_USER_TRANSACTIONS=SELECT * FROM TransactionLogs WHERE UserId = @userId ORDER BY TransactionDate DESC

# ==================== AUDIT & LOGGING QUERIES ====================
# Audit Log Queries
GET_AUDIT_LOGS_BY_USER=SELECT * FROM AuditLogs WHERE UserId = @userId ORDER BY AuditDate DESC

# Activity Log Queries
GET_USER_ACTIVITIES=SELECT * FROM ActivityLogs WHERE UserId = @userId AND ActivityDate >= DATEADD(day, -30, GETDATE()) ORDER BY ActivityDate DESC

# Error Log Queries

# ==================== REPORTING QUERIES ====================
# Sales Reports

# User Reports
GET_USER_REGISTRATION_REPORT=SELECT CAST(CreatedDate AS DATE) as Date, COUNT(*) as NewUsers FROM Users WHERE CreatedDate >= DATEADD(day, -@days, GETDATE()) GROUP BY CAST(CreatedDate AS DATE) ORDER BY Date
GET_USER_LOGIN_REPORT=SELECT CAST(LoginDate AS DATE) as Date, COUNT(DISTINCT UserId) as UniqueLogins, COUNT(*) as TotalLogins FROM LoginHistory WHERE LoginDate >= DATEADD(day, -@days, GETDATE()) GROUP BY CAST(LoginDate AS DATE) ORDER BY Date
GET_USER_ACTIVITY_REPORT=SELECT u.UserId, u.Username, COUNT(al.ActivityId) as ActivityCount, MAX(al.ActivityDate) as LastActivity FROM Users u LEFT JOIN ActivityLogs al ON u.UserId = al.UserId WHERE al.ActivityDate >= DATEADD(day, -@days, GETDATE()) GROUP BY u.UserId, u.Username ORDER BY ActivityCount DESC

# Inventory Reports

# ==================== SYSTEM QUERIES ====================
# Health Check Queries

# Maintenance Queries

# ==================== STORED PROCEDURES ====================
# Define stored procedure calls
EXEC_GET_USER_DETAILS=EXEC sp_GetUserDetails @UserId = @userId

# ==================== COMPLEX QUERIES ====================
# Business Logic Queries



# Performance Analysis Queries

